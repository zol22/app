{"version":3,"sources":["Display.js","Gif.js","Create.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","style","paddingTop","TableBody","props","rows","characterData","map","row","index","key","name","src","url","alt","onClick","removeCharacter","Table","this","Component","Gif","log","gif","addGif","setState","visible","state","onSelected","Create","handleChange","event","target","value","replace","submitForm","preventDefault","handleSubmit","initialState","pasteAsPlainText","text","clipboardData","getData","document","execCommand","keyPressChange","keyCode","which","console","showEmoji","showGif","handleClick","refs","fileUploader","click","file","files","addEmoji","emoji","e","native","fixed_height_small","className","onSubmit","type","html","onPaste","onKeyPress","placeholder","disabled","onChange","width","height","position","top","right","emojiTooltip","title","set","onSelect","App","characters","filter","character","i","Display","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c3dd7b5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader =  () => {\n    return(\n        <thead>\n        <tr>\n          <th style={{paddingTop:'40px'}}>New Post</th>\n          {/*<th>Job</th>*/}\n        </tr>\n      </thead>\n    )\n}\n\n/* Child TableBody receives props from Parent Table. Child access props by declaring it in \nthe functional component callback, remenber dont use \"this\" since it's not a class, you dont'\nhave to reference the component itself*/\nconst TableBody = props => {\n    const rows = props.characterData.map((row, index) => {\n      return (\n        <tr key={index}>\n          <td>{row.name}</td>\n          {/*<td>{row.job}</td>*/}\n          <td>\n              <img src={row.url} alt=\"No GIF\"></img>\n          </td>\n          <td>\n            <button onClick={() => props.removeCharacter(index)}>Delete</button>\n          </td>\n        </tr>  \n      )\n    }) \n    return <tbody>{rows}</tbody>\n}\n\n\n  class Table extends Component {\n    render() {\n        const {characterData,removeCharacter} = this.props; \n        /*Destructuring assigment, assigning values taken directly from an object to variables.\n          Equivalent to -> const charData = this.props.characterData\n          Equivalent to -> const removeChar = this.props.removeCharacter*/\n        return (\n            <table>\n                <TableHeader/>\n\n                {/* Parent Table gives props to Child TableBody*/}\n                <TableBody characterData={characterData} removeCharacter={removeCharacter}/>\n            </table>\n      )\n    }\n  }\nexport default Table;","import Picker from 'react-giphy-component'\nimport React, { Component} from 'react'\n\nclass Gif extends Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n      visible:false\n    }\n  }\n\n\n  log = (gif) => {\n    {this.props.addGif(gif)};\n    this.setState({\n      visible:true\n    })\n    \n  }\n\n  render () {\n    return (\n      <div>\n        <Picker onSelected={this.log}  />\n        {this.state.visible ?<img alt=\"gif\" src={this.props.url} ></img> : null}\n        \n      \n      </div>\n    )\n  }\n}\n\nexport default Gif;","import React, { Component } from 'react';\nimport Gif from './Gif';\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker} from 'emoji-mart'\nimport { Smile , Heart} from 'react-feather';\nimport ContentEditable from 'react-contenteditable'\n\n//import ReactTextareaAutocomplete from '@webscopeio/react-textarea-autocomplete'; // emoji autocomplete(:) or for @ mentions (tag people)\n\n\nclass Create extends Component {\n    constructor(props) {\n      super(props);\n      this.initialState = {\n        showEmoji:false,\n        showGif:false,\n        name:'',\n        url: '',\n      };\n      this.state = this.initialState;\n    }\n\n    /* Consume as many input fields you want with one single method handleChange,\n        [name]:value , It's dynamic key assigment\n        Main point-> We no longer have any individual handleChage function for each type of input\n        change.\n\n\n        Long way: Create two different handleChange() functions for the two inputs ...\n\n        1)... const name = event.target.value\n            this.setState({name: name})\n        \n        2)... const value = event.target.value\n            this.setState({value:value})\n    */\n    handleChange = event => {\n        /*const { name, value } = event.target\n        this.setState({\n          [name]: value,\n        })\n      */\n\n        //Doesnt work for more than 1 space\n        if(event.target.value === '&nbsp;'){\n          return event.target.value.replace(/&nbsp;/g, ' ')\n        }\n\n        this.setState({\n          name: event.target.value//textContent\n        })\n        //this.state.name.replace(/&nbsp;/g, '')\n      }\n\n    submitForm = (event) => {\n      event.preventDefault();\n      this.props.handleSubmit(this.state) // Whole State is send to handleSubmit\n      this.setState(this.initialState); // Reset evyerthing to initialState again;\n       \n      }\n\n    pasteAsPlainText = event => {\n      event.preventDefault()\n      const text = event.clipboardData.getData('text/plain')\n      document.execCommand('insertHTML', false, text)\n    }\n\n    keyPressChange = event => {\n      const keyCode = event.keyCode || event.which\n\n      if(keyCode === 32){\n        console.log(\"space\");\n      }\n    }\n    /*disableNewlines = event => {\n      const keyCode = event.keyCode || event.which\n    \n      if (keyCode === 13) {\n        event.returnValue = false\n        if (event.preventDefault) event.preventDefault()\n      }\n    }*/\n\n    showEmoji = () =>{\n      this.setState({\n        showEmoji:!this.state.showEmoji\n      })\n    }\n\n    showGif = () =>{\n      this.setState({\n        showGif:!this.state.showGif,\n      })\n    }\n\n    handleClick = () => {\n      this.refs.fileUploader.click() // Open Browser File\n      var file = this.refs.fileUploader.files[0];\n      console.log(file);   \n    }\n\n    addEmoji = (emoji) =>{\n      const e = emoji.native;\n      this.setState({\n        name: this.state.name + e,\n        showEmoji: false,\n      }); \n    }\n\n    addGif= (gif) =>{\n      var url = gif.fixed_height_small.url;\n      this.setState({\n        url : url,\n        name: this.state.name, // + gif\n        showGif: false,\n      }); \n      \n    }\n      render() {  \n        \n        return (\n        <div className=\"App\">\n          <form onSubmit={this.submitForm}>\n            <label>Create Post</label>\n            <div>\n              <button type=\"button\" className=\"divCursor toggle-emoji\" onClick={this.showEmoji}><Smile /></button>\n              <button type=\"button\" className=\"divCursor toggle-emoji\" onClick={this.showGif}><Heart /></button>\n              <ContentEditable\n                className=\"message-input\"\n                //contentEditable=\"true\" //type=text\n                html={this.state.name}\n                onPaste={this.pasteAsPlainText} // Function to paste the text not the format\n                //onKeyPress={this.disableNewlines}\n                onKeyPress = {this.keyPressChange}\n                //aria-multiline=\"true\"\n                placeholder={\"What's in your mind?\"}\n                //suppressContentEditableWarning={true}\n                //name=\"name\"\n                disabled={false}\n                //value={this.state.name}\n                //onClick={this.handleChange} \n                onChange = {this.handleChange} // Change the state value on every input field\n                style={{width:\"70%\",height:\"300px\"}}\n              >\n          \n              </ContentEditable>\n              \n            </div>\n\n            {/*\n            <div className=\"divCursor\" onClick={() => this.handleClick()}>\n              <Emoji symbol=\"🖼️\" label=\"sheep\"/>\n              <span> Photo/Video</span>\n              <input type=\"file\" id=\"file\" accept=\"image/png, image/jpeg, video/*\" ref=\"fileUploader\" style={{display: \"none\"}}></input>\n            </div>\n              */}\n            <button className=\"post\" type=\"submit\">Post</button>\n          </form>\n            {this.state.showEmoji ? (<span style={{position:\"absolute\",top:10,right:0}} ><Picker emojiTooltip={true}title='Pick your emoji…' set=\"emojione\" onSelect={this.addEmoji} /> </span>): null } {/*When select a emoji, call addemoji() */}\n            {this.state.showGif ? (<span style={{position:\"absolute\",top:10,right:0}} ><Gif url={this.state.url} addGif={this.addGif}  /> </span>): null } {/*When select a emoji, call addGif() */}\n        </div>\n        );\n      }\n  }\n\n  export default Create;","import React, { Component } from 'react';\nimport Display from './Display';\nimport Create from './Create';\nimport './App.css';\n\n\n/* The only time you need to use class component is if it's holding state. Otherwise,\na functional component is the way to go.*/\nclass App extends Component {\n\n  /* Constructor is dead!*/\n  state = {\n    characters: [],\n  }\n\n    /* Filter is testing an index that was passing vs all the indices in the array, and returning\n    all but the one that is passed through ,but the one if (i == index) */ \n  removeCharacter = index =>{\n    const { characters } = this.state\n    this.setState({\n      characters: characters.filter((character, i) => {\n      return i !== index\n      }),\n    })\n  }\n\n\n  handleSubmit = character => {\n    this.setState({ \n      characters: [...this.state.characters, character] \n    })\n \n  }\n  \nrender(){\n  const {characters} = this.state;\n  return(\n    <div className=\"container\">\n      \n      <Create handleSubmit={this.handleSubmit}/>\n      <Display characterData={characters} removeCharacter={this.removeCharacter}/>\n    </div>\n\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}